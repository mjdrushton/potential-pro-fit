.. _pprofit-minimizers-Simulated_Annealing:

Particle_Swarm
^^^^^^^^^^^^^^

:Type-Name: Particle_Swarm
:Description: Minimizer based on Inspyred's PSO minimizer.

Algorithm Description
=====================

Particle swarm optimiser.


.. note::
  This minimizer wraps the PSO implementation provided within the `inspyred library <http://inspyred.github.com>`_ . If you use this minimizer please acknowledge inspyred. The approach used by the optimizer was described in [Deb and Padhye]_ please recognise their work if you make use of the Particle_Swarm minimizer.
  


Optional Fields
===============

:Name: cognitive_rate
:Arg-type: float
:Default: 2.1
:Bounds: >0.0
:Description: The rate at which the particle's current position influences its movement. 

\

:Name: inertia
:Arg-type: float
:Default: 0.5
:Bounds: >0.0
:Description: Inertia constant to be used in particle updating.

\

:Name: max_iterations
:Arg-type: int
:Default: 1000
:Description: Terminate optimisation after this number of iterations.

\

:Name: neighbourhood_size
:Arg-type: int
:Default: 3
:Bounds: >2 and < population_size - 1
:Description: Number of neighbours for each particle when ``topology`` is set to ``ring``.

\

:Name: population_distribution
:Arg-type: str
:Default: uniform
:Description: Defines the probability distribution from which initial population is initialised. By default candidats are chosen using fitting variable bounds using a uniform distribution (chosen by setting ``population_distribution : uniform``). 

  If ``population_distribution : bias`` is used then the selection of candidate solutions will be biased towards the initial value of fitting variables (as set in the ``[Variables]`` section). Variables are chosen from a PERT distribution with bounds set according to each variable's bounds and a distribution mode set to the variable's initial value. The ``bias`` distribution accepts an optional value determining the distribution's shape (by default this is 10.0). If the shape parameter is 0.0 the uniform distribution is obtained. Higher values bias the distribution more and more narrowly around each variable's initial value. 
:Example: To define a bias distribution with shape parameter of 20.0 the following would be used:
  
  .. code ::
  
    population_distribution : bias 20.0

\

:Name: population_include_orig_vars
:Arg-type: bool
:Default: True
:Description: If True include the variable values given in fit.cfg in the minimizer's initial population. If False population will be initialised completely from scratch.

\

:Name: population_load_from_csv
:Arg-type: file path
:Description: When given, the minimizer's initial population is initialised from variable values stored in a file containing comma separated values. At a minimum this must contain columns with the same names as the fitting variables. Up to `population_size` rows will be included in the initial population.

\

:Name: population_load_from_ppdump
:Arg-type: file path
:Description: When given, the minimizer's initial population is initialised from variable values stored in the CSV files generated by ``ppdump``.
:Example: A suitably formatted CSV file, containing the best candidate from a previous ``pprofit`` run could be obtained using the following command:
    
  .. code:: bash
      
      ppdump --iteration best \
             --candidate-filter all \
             --fit-variable-columns \ 
             -o initial_population.csv

  This could then be specified to the minimizer using the options:

  .. code:: ini    

      population_load_from_ppdump : initial_population.csv
      population_include_orig_vars : False

  The ``population_include_orig_vars : False`` option is used so that the original variables values in ``fit.cfg`` do not occupy one of the slots in the initial population, which would mean the values from `initial_population.csv` would be truncated. Alternatively ``population_size`` could have been increased by 1 so both could be included.

\

:Name: population_size
:Arg-type: int
:Default: 64
:Bounds: >=2
:Description: Size of population.

\

:Name: random_seed
:Arg-type: int
:Default: current time
:Description: Random seed used during optimisation.

\

:Name: social_rate
:Arg-type: float
:Default: 2.1
:Bounds: >0.0
:Description: The rate at which the particle's neighbors influence its movement.

\

:Name: topology
:Arg-type: str
:Options: 'star' or 'ring'
:Description: Defines the neighbours of particles in the population. If 'star' then each particle is connected to all other particles. If 'ring' then all particles within a specific neighbourhood size are connected (set using the ``neighbourhood_size`` configuration option).

.. [Deb and Padhye] Deb and Padhye, “Development of Efficient Particle Swarm Optimizers by Using Concepts from Evolutionary Algorithms”, GECCO 2010, pp. 55–62