.. _pprofit-minimizers-DEA:

DEA
^^^

:Type-Name: DEA
:Description: Minimizer based on the `differential evolution algorithm <http://en.wikipedia.org/wiki/Differential_evolution>`_ of Storn and Price. 


Algorithm Description
=====================

.. figure:: images/DEA_flowchart.svg

  Flowchart showing operation of the differential evolution algorithm. Configuration options and the stage of the algorithm that they affect are indicated in blue. 


  1. **Initialisation:** Fitting parameters bounds read from ``[Variables]`` section of the ``fit.cfg`` (see :ref:`pprofit-variables`). A list of candidate solutions ``population_size`` in length is initialised by randomly selecting parameter values uniformly from interval defined by these bounds.

  2. **Population Evaluation:** Merit function is used to calculate fitness values for each candidate solution within population.

  .. note:: If a merit value of NaN is obtained (maybe due to an error condition in an evaluator) during population evaluation, this solution will be dropped from the population for the remainder of the minimisation run leading to a population size less than ``population_size``.

  3. **Parent Selection:** New candidates are generated by performing crossover between pairs of parent solutions extracted from the existing population. Parents are selected using `tournament selection <http://en.wikipedia.org/wiki/Tournament_selection>`_. This proceeds as follows:
        * ``tournament_size`` candidates are selected from population at random.
        * candidate with the lowest merit value is kept.
        * tournament is repeated until ``num_selected`` candidates have been selected for crossover. 

  4. **Crossover:** The previous step generates ``num_selected`` parents. Mothers are extracted as the even numbered members of this list whilst fathers are the odd numbered solutions. For each mother/father pair two offspring are generated. Crossover occurs with the probability defined by the ``crossover-rate`` parameter (when crossover is not performed, parents are passed directly to next step). The crossover algorithm is as follows:
        * offspring values are obtained by taking the value of the parent with the best merit values and adding the difference between mother and father values weighted by a random number (between 0 and 1) to create offspring value.
        * for each fitting parameter within candidates:
            - if mother has lowest merit value then offspring values = :math:`m + r(m-f)`
            - if father has lowest merit value then offspring values = :math:`f - r(m-f)`
            - Where:
                + :math:`m` = mother parameter value
                + :math:`f` = father parameter value
                + :math:`r` = random number between 0 and 1.

  5. **Mutation:** for each fit parameter within the offspring generated in the previous step gaussian mutation is performed with the probability defined by the ``mutation_rate`` parameter. Mutation is performed by selecting a value at random from a gaussian distribution centred at ``gaussian_mean`` and ``gaussian_stdev`` and adding to the parameter.
  6. **Evaluate Offspring:** The merit function is used to evaluate the new offspring. 
  7. **Replace in Population:** The offspring replace the least fit (higher merit value) individuals in the existing population, even if those offspring are less fit than the individuals that they replace.
  8. **Report to Monitor:** Population is archived to ``fitting_run.db`` database and reported to ``pprofitmon`` if running.


.. note::
  This minimizer wraps the DEA implementation provided within the `inspyred library <http://inspyred.github.com>`_ . If you use this minimizer please acknowledge inspyred.

Optional Fields
===============
:Name: crossover_rate
:Arg-type: float
:Default: 1.0
:Bounds: 0.0-1.0
:Description: Probability with which crossover should take place.

\ 

:Name: gaussian_mean
:Arg-type: float
:Default: 0.0
:Description: Mean of gaussian distribution used during mutation.

\

:Name: gaussian_stdev
:Arg-type: float
:Default: 1.0
:Description: Standard deviation of gaussian distrubtion used during mutation.

\

:Name: max_iterations
:Arg-type: int
:Default: 1000
:Description: Terminate optimisation after this number of iterations.

\

:Name: mutation_rate
:Arg-type: float
:Default: 0.1
:Bounds: 0.0-1.0
:Description: Probability that offspring fit parameter will undergo gaussian mutation.

\

:Name: num_selected
:Arg-type: int
:Default: 2
:Bounds: >=2
:Description: Number of parents and hence offspring selected during tournament selection.

\

:Name: population_include_orig_vars
:Arg-type: bool
:Default: True
:Description: If True include the variable values given in fit.cfg in the minimizer's initial population. If False population will be initialised completely from scratch.

\

:Name: population_load_from_csv
:Arg-type: file path
:Description: When given, the minimizer's initial population is initialised from variable values stored in a file containing comma separated values. At a minimum this must contain columns with the same names as the fitting variables. Up to `population_size` rows will be included in the initial population.


\

:Name: population_load_from_ppdump
:Arg-type: file path
:Description: When given, the minimizer's initial population is initialised from variable values stored in the CSV files generated by ``ppdump``.
:Example: A suitably formatted CSV file, containing the best candidate from a previous ``pprofit`` run could be obtained using the following command:
    
  .. code:: bash
      
      ppdump --iteration best \
             --candidate-filter all \
             --fit-variable-columns \ 
             -o initial_population.csv

  This could then be specified to the minimizer using the options:

  .. code:: ini    

      population_load_from_ppdump : initial_population.csv
      population_include_orig_vars : False

  The ``population_include_orig_vars : False`` option is used so that the original variables values in ``fit.cfg`` do not occupy one of the slots in the initial population, which would mean the values from `initial_population.csv` would be truncated. Alternatively ``population_size`` could have been increased by 1 so both could be included.

\

:Name: population_size
:Arg-type: int
:Default: 64
:Bounds: >=2
:Description: Size of population.

\

:Name: random_seed
:Arg-type: int
:Default: current time
:Description: Random seed used during optimisation.

\

:Name: tournament_size
:Arg-type: int
:Default: >=2
:Description: Number of candidates randomly selected from population during tournament selection of parents before crossover.

