[FittingRun]
title : Example-01_MgO

# =============================================================================
# Minimizer:
# Use Nelder-Mead simplex algorithm to minimize merit-function
# see documentation for description of other availableminimizers. 
# =============================================================================

[Minimizer]
type : NelderMead

# =============================================================================
# Runner:
# Define a runner named 'Local'.
# This will run  jobs in parallel.
# 
# You can define multiple runners (i.e. to run on a remote HPC resource). 
# See documentation for more.
# =============================================================================

[Runner:Local]
type : Local
nprocesses : 4

# =============================================================================
# Variables:
# Place fitting variables in [Variables] section. 
# Variables definitions take the form:
# 	VARIABLE_NAME : INITIAL_VALUE [(LOWERBOUND, UPPERBOUND)] [*]
#
# Where:
#	VARIABLE_NAME : 
#		Label by which the variable is identified within the fitting system.
#	INITIAL_VALUE : 
#		The starting value for the variable.
#	(LOWERBOUND, UPPERBOUND) : 
#		Specify the desired range for a particular variable. 
#       For minimizers supporting bounds these constrain variable values to 
#       sit in range LOWERBOUND < value < UPPERBOUND.
#	*: 
#		An asterisk at the end of a variable line indicates that the variable 
#		should be optimised during fitting. If no asterisk appears, the 
#		variable will be held fixed.
# =============================================================================

[Variables]
morse_Ca_O_A : 0.030211 *
morse_Ca_O_B : 2.241334 *
morse_Ca_O_C : 2.923245 *
lennard_Ca_O_A : 5.0 *
#
morse_O_O_A : 0.042395 
morse_O_O_B : 1.379316 
morse_O_O_C : 3.618701
lennard_O_O_A : 22.0


# =============================================================================
# Optional sections, see documentation for more (uncomment to use):
#
# [CalculatedVariables]
# 	Contains formulae that calculate variables from values contained in 
# 	[Variables] section.

# [MetaEvaluator:EVALUATOR_NAME]
#   Meta evaluators can be thought of as evaluators that are called after job 
#   evaluation and therefore have access to the values extracted by the job 
#   level evaluators. Rather than being associated with a single job, 
#   meta-evaluators are associated with the fitting run as a whole. Sitting 
#   above the jobs in this way means meta-evaluators can be used for many 
#   purposes. See documentation for more.
# 
# =============================================================================
